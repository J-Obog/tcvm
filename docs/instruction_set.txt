==============  INSTRUCTION FMT ================
INSTRUCTION
8 bits => 5 bits for Opcode, 3 bits for instruction suffix

An example of an instruction suffix can be seen in the 'mov8' instruction.
The opcode would be the 'mov' mnemonic with the suffix being '8' to specify
that the value being moved into the destination is 8 bits or 1 byte. 

OPERANDS HEADER
8 bits => 4 bits for the destination, 4 bits for the source

For instructions with one or two operands, the next byte after the INSTRUCTION
is the OPERANDS HEADER which describes what destination and source are for a 
given instruction. Below is the table for the operand types.

OPERAND TYPE
0000    <none>      Instruction doesn't use this operand
0001    register    A CPU Register    
0010    [register]  The effective address of a register
0011    [memory]    The effective address of a location in memory
0100    immediate   A numeric literal


============== INSTRUCTION SET ================
nop
mov[size]    destination, source
add[size]    destination, source
sub[size]    destination, source
mul[size]    destination, source
div[size]    destination, source
and[size]    destination, source
or[size]     destination, source
not[size]    destination
xor[size]    destination, source
cmp[size]    destination, source
jmp[cond]    source
push[size]   source
pop[size]       
call         source
ret
shl[size]   destination, source
shr[size]   destination, source
sys

============== DIRECTIVES ================
label       identifier
D[size]     immediate

--------------------------------------------------------
destination = register | [register] | [memory] 
source = register | [register] | [memory] | memory | immediate
size = 8 | 16 | 32
cond = Z | NZ | N | NN | P | NP